# Step 1: Objective - Develop a model to predict medical costs.

# Step 2: Data Preparation
# 2.1 Collect a dataset of medical cost records
# Assuming your dataset is in a CSV file named 'medical_costs.csv'
import pandas as pd

df = pd.read_csv('/content/insurance.csv')

# 2.2 Handle data cleaning
# Handling missing values
df = df.dropna()

# Handling outliers in 'charges' column (you may need to adjust this based on your data)
df = df[(df['charges'] > 1000) & (df['charges'] < 60000)]

# 2.3 Encode categorical variables and normalize numerical features
df_encoded = pd.get_dummies(df, columns=['sex', 'smoker', 'region'], drop_first=True)

# Normalizing numerical features (you may choose a different method based on your data)
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df_encoded[['age', 'bmi', 'children']] = scaler.fit_transform(df_encoded[['age', 'bmi', 'children']])

# Step 3: Model Choice
# 3.1 Select a suitable regression model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X = df_encoded.drop('charges', axis=1)
y = df_encoded['charges']

# Step 4: Training and Evaluation
# 4.1 Split the data (common ratios are 70-30 or 80-20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4.2 Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# 4.3 Assess the model's performance using appropriate evaluation metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Step 5: Model Evaluation
# 5a. Evaluate the model's ability to predict medical costs using the testing dataset
# (Already done in the evaluation metrics above)

# 5b. Visualize results and interpret them for insights
import matplotlib.pyplot as plt

plt.scatter(y_test, y_pred)
plt.xlabel('Actual Charges')
plt.ylabel('Predicted Charges')
plt.title('Actual vs Predicted Medical Costs')
plt.show()



# Import DecisionTreeRegressor
from sklearn.tree import DecisionTreeRegressor

# Step 5: Model Evaluation
# 5a. Evaluate the model's ability to predict medical costs using the testing dataset
# (Already done in the evaluation metrics above)

# 5b. Visualize results and interpret them for insights
import matplotlib.pyplot as plt



# Residual plot for understanding errors
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('Predicted Charges')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()

# Interpretation and Insights

if isinstance(model, (DecisionTreeRegressor)):
    feature_importance = model.feature_importances_
    features = X.columns
    importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importance})
    importance_df = importance_df.sort_values(by='Importance', ascending=False)

    # Bar plot of feature importance
    plt.bar(importance_df['Feature'], importance_df['Importance'])
    plt.xlabel('Features')
    plt.ylabel('Importance')
    plt.title('Feature Importance')
    plt.xticks(rotation=45)
    plt.show()
